---
- name: Setup Docker Swarm
  hosts: all
  remote_user: ubuntu
  become: true
  gather_facts: true
  vars:
    docker_packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
  tasks:
    - name: Update cache & Install apt packages
      ansible.builtin.apt:
        update_cache: yes
        state: present
        pkg:
          - nfs-common
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3
  
    - name: Add an apt signing key for Docker
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
  
    - name: Add Docker repository into sources list
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
  
    - name: Update cache & Install Docker
      ansible.builtin.apt:
        update_cache: yes
        state: present
        pkg: "{{ docker_packages }}"
  
    - name: Ensure Docker service is enabled and started
      ansible.builtin.systemd:
        state: started
        name: docker    
        enabled: yes

    - name: Add user to the docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

- name: Setup Docker Swarm
  hosts: master
  remote_user: ubuntu
  become: true
  gather_facts: false
  tasks:
    - name: Leave Docker Swarm (if currently joined)
      shell: docker swarm leave --force
      ignore_errors: true

    - name: Initialize the Swarm on the master node
      shell: docker swarm init --advertise-addr {{ ansible_host }}
      register: swarm_init
      ignore_errors: true

    - name: Get the join token for worker nodes
      shell: docker swarm join-token worker -q
      when: swarm_init.rc == 0
      register: worker_join_token

    - name: Set fact with join token
      ansible.builtin.set_fact:
        join_token: "docker swarm join --token {{ worker_join_token.stdout }} {{ ansible_host }}:2377"
      when: worker_join_token.stdout is defined

    - name: Print token
      debug:
        msg: docker swarm join --token {{ worker_join_token.stdout }} {{ ansible_host }}:2377
      when: worker_join_token is defined      

- name: Join Docker Swarm as worker nodes
  hosts: worker
  remote_user: ubuntu
  become: true
  gather_facts: false
  tasks:
    - name: Leave Docker Swarm (if currently joined)
      shell: docker swarm leave
      ignore_errors: true

    - name: Join Docker Swarm as worker
      ansible.builtin.shell:
        cmd: "{{ hostvars[groups['master'][0]]['join_token'] }}"

- name: Setup EFS
  hosts: all
  remote_user: ubuntu
  become: true
  gather_facts: false
  vars:
    deployment_version: 130620242108
    mount_directory: /home/ubuntu/efs
    app_directory: /home/ubuntu/app
  tasks:
    - name: Ensure mount directory exists.
      ansible.builtin.file:
        path: "{{ item  }}"
        state: directory
        mode: 0755
        owner: ubuntu
        group: ubuntu
      with_items:
        - "{{ mount_directory }}"
        - "{{ app_directory }}"

    - name: Ensure EFS volume is mounted.
      mount:
        name: "{{ mount_directory }}"
        src: "{{ hostvars[inventory_hostname].efs_endpoint }}"
        fstype: nfs4
        opts: nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport
        state: mounted
  
    - name: Prepare & Copy docker-compose.yml
      ansible.builtin.template:
        src: docker-compose.yml.j2
        dest: "{{ app_directory }}/docker-compose.yml"
        mode: 0755
        owner: ubuntu
        group: ubuntu
  
    - name: Docker Login
      ansible.builtin.shell: |
        docker login ghcr.io -u {{ docker_registry_username }} -p {{ docker_registry_password }}

    - name: Docker Run
      ansible.builtin.shell:
        chdir: "{{ app_directory }}"
        cmd: |
          #stop first
          docker compose -f docker-compose.yml down
          # then run
          docker compose -f docker-compose.yml up -d
      
    - name: Docker log
      ansible.builtin.shell:
        chdir: "{{ app_directory }}"
        cmd: docker compose logs 
      register: dockerlogs
  
    - name: Print dockerlogs
      ansible.builtin.debug:
        msg: "{{ dockerlogs.stdout }}"
  
    - name: Check that a /actuator/health endpoint of the applicatio return 200 http status code
      ansible.builtin.uri:
        url: http://localhost:8080/actuator/health
        method: GET
      register: _result
      until: _result.status == 200
      retries: 5
      delay: 5